using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Carriage
{
    public int UniqueId { get; set; }
    public string Type { get; set; }
    public double Weight { get; set; }
    public double Length { get; set; }
    public string Color { get; set; }
    public int MaxPassengers { get; set; }
    public double MaxCargoWeight { get; set; }
    public bool HasRestroom { get; set; }
    public string Manufacturer { get; set; }
    public int SeatsCount { get; set; }

    public Carriage(int uniqueId, string type, double weight, double length, string color, int maxPassengers, double maxCargoWeight, bool hasRestroom, string manufacturer, int seatsCount)
    {
        UniqueId = uniqueId;
        Type = type;
        Weight = weight;
        Length = length;
        Color = color;
        MaxPassengers = maxPassengers;
        MaxCargoWeight = maxCargoWeight;
        HasRestroom = hasRestroom;
        Manufacturer = manufacturer;
        SeatsCount = seatsCount;
    }
}

class PassengerCarriage : Carriage
{
    public int PassengerCount { get; set; }

    public PassengerCarriage(int uniqueId, double weight, double length, string color, int maxPassengers, int seatsCount) :
        base(uniqueId, "Пасажирський", weight, length, color, maxPassengers, 0, true, "Manufacturer", seatsCount)
    {
        PassengerCount = 0;
    }
}

class FreightCarriage : Carriage
{
    public double MaxCargoVolume { get; set; }

    public FreightCarriage(int uniqueId, double weight, double length, string color, double maxCargoWeight, double maxCargoVolume) :
        base(uniqueId, "Вантажний", weight, length, color, 0, maxCargoWeight, false, "Manufacturer", 0)
    {
        MaxCargoVolume = maxCargoVolume;
    }
}


class DiningCarriage : Carriage
{
    public bool HasKitchen { get; set; }

    public DiningCarriage(int uniqueId, double weight, double length, string color, bool hasRestroom, bool hasKitchen) :
        base(uniqueId, "Ресторанний", weight, length, color, 50, 0, hasRestroom, "Manufacturer", 0)
    {
        HasKitchen = hasKitchen;
    }
}

class SleepingCarriage : Carriage
{
    public bool HasBedding { get; set; }

    public SleepingCarriage(int uniqueId, double weight, double length, string color, bool hasRestroom, bool hasBedding) :
        base(uniqueId, "Спальний", weight, length, color, 20, 0, hasRestroom, "Manufacturer", 20)
    {
        HasBedding = hasBedding;
    }
}


class Train
{
    private List<Carriage> carriages;

    public Train()
    {
        carriages = new List<Carriage>();
    }

    public void AddCarriage(Carriage carriage)
    {
        carriages.Add(carriage);
    }


    public void RemoveCarriage(Carriage carriage)
    {
        carriages.Remove(carriage);
    }


    public List<Carriage> FindCarriagesByType(string type)
    {
        List<Carriage> foundCarriages = new List<Carriage>();
        foreach (var carriage in carriages)
        {
            if (carriage.Type == type)
            {
                foundCarriages.Add(carriage);
            }
        }
        return foundCarriages;
    }


    public void DisplayInfo()
    {
        Console.WriteLine("Потяг складається з таких вагонів:");
        foreach (var carriage in carriages)
        {
            Console.WriteLine($"Тип: {carriage.Type}, Вага: {carriage.Weight} т, Довжина: {carriage.Length} м, Колiр: {carriage.Color}");
        }
    }
}

class Program
{
    static void Main()
    {

        PassengerCarriage passengerCarriage1 = new PassengerCarriage(1, 50.5, 25.0, "Синiй", 60, 70);
        FreightCarriage freightCarriage1 = new FreightCarriage(2, 70.2, 30.0, "Чорний", 100.0, 200.0);
        DiningCarriage diningCarriage1 = new DiningCarriage(3, 40.0, 20.0, "Зелений", true, true);
        SleepingCarriage sleepingCarriage1 = new SleepingCarriage(4, 60.0, 35.0, "Жовтий", true, true);


        Train train = new Train();
        train.AddCarriage(passengerCarriage1);
        train.AddCarriage(freightCarriage1);
        train.AddCarriage(diningCarriage1);
        train.AddCarriage(sleepingCarriage1);


        train.DisplayInfo();
        Console.ReadLine();
    }
}
